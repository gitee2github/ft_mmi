# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/gn/fangtian.gni")
import("//input/multimodalinput_mini.gni")
mmi_service_path = "${mmi_path}/service"

config("libmmi_server_config") {
  include_dirs = [
    "${mmi_service_path}/sinput_device_cooperate/include",
    "${mmi_service_path}/device_manager/include",
    "${mmi_service_path}/device_scalability/include",
    "${mmi_service_path}/delegate_task/include",
    "${mmi_service_path}/event_dispatch/include",
    "${mmi_service_path}/key_event_normalize/include",
    "${mmi_service_path}/event_handler/include",
    "${mmi_service_path}/event_dump/include",
    "${mmi_service_path}/monitor/include",
    "${mmi_service_path}/interceptor/include",
    "${mmi_service_path}/dfx/include",
    "${mmi_service_path}/libinput_adapter/include",
    "${mmi_service_path}/message_handle/include",
    "${mmi_service_path}/module_loader/include",
    "${mmi_service_path}/window_manager/include",
    "${mmi_service_path}/touch_event_normalize/include",
    "${mmi_service_path}/key_command/include",
    "${mmi_service_path}/subscriber/include",
    "${mmi_service_path}/timer_manager/include",
    "${mmi_service_path}/permission_helper/include",
    "${mmi_service_path}/connect_manager/include",
    "${mmi_service_path}/filter/include",
    "${mmi_service_path}/module_loader/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "${mmi_service_path}/mouse_event_normalize/include",
    "//foundation/multimodalinput/interfaces/native/innerkits/event/include",
    "//foundation/window/window_manager/interfaces/innerkits/wm",
    "//input/interfaces/native/innerkits/common/include",
    "//input/util/common/include",
    "//input/util/socket/include",
    "//input/util/network/include",
    "//input/frameworks/proxy/event_handler/include",
  ]

  if (input_feature_input_cooperation) {
    include_dirs += [
      "${mmi_service_path}/input_device_cooperate/include",
      "//foundation/deviceprofile/device_profile_core/interfaces/innerkits/core/include",
      "//foundation/distributedhardware/device_manager/interfaces/inner_kits/native_cpp/include",
    ]
  }

  defines = []

  if (input_feature_combination_key) {
    defines += [ "OHOS_BUILD_ENABLE_COMBINATION_KEY" ]
  }

  if (input_feature_pointer_drawing) {
    defines += [ "OHOS_BUILD_ENABLE_POINTER_DRAWING" ]
  }

  if (input_feature_interceptor) {
    defines += [ "OHOS_BUILD_ENABLE_INTERCEPTOR" ]
  }

  if (resource_schedule_service_enabled) {
    defines += [ "OHOS_RSS_CLIENT" ]
  }

  if (input_feature_pointer_drawing) {
    defines += [ "OHOS_BUILD_ENABLE_POINTER_DRAWING" ]
  }
  if (input_feature_keyboard) {
    defines += [ "OHOS_BUILD_ENABLE_KEYBOARD" ]
  }

  if (input_feature_mouse) {
    defines += [ "OHOS_BUILD_ENABLE_POINTER" ]
  }

  if (input_feature_touchscreen) {
    defines += [ "OHOS_BUILD_ENABLE_TOUCH" ]
    defines += [ "FT_BUILD_USE_DEFAULT_TOUCH_AREA_INFO" ]
  }
  if (input_feature_monitor) {
    defines += [ "OHOS_BUILD_ENABLE_MONITOR" ]
  }

  if (input_feature_input_cooperation) {
    defines += [ "OHOS_BUILD_ENABLE_COOPERATE" ]
  }

  if (input_feature_joystick) {
    defines += [ "OHOS_BUILD_ENABLE_JOYSTICK" ]
  }
}



ft_shared_library("libmmi-server") {
  sources = [
    "//input/frameworks/proxy/event_handler/src/bytrace_adapter.cpp",
    "${mmi_service_path}/delegate_task/src/delegate_tasks.cpp",
    "${mmi_service_path}/device_manager/src/input_device_manager.cpp",
    "${mmi_service_path}/dfx/src/dfx_hisysevent.cpp",
    "${mmi_service_path}/event_dispatch/src/event_dispatch_handler.cpp",
    "${mmi_service_path}/event_dump/src/event_dump.cpp",
    "${mmi_service_path}/event_handler/src/anr_manager.cpp",
    "${mmi_service_path}/event_handler/src/event_normalize_handler.cpp",
    "${mmi_service_path}/event_handler/src/input_event_handler.cpp",
    "${mmi_service_path}/event_handler/src/key_auto_repeat.cpp",
    "${mmi_service_path}/event_handler/src/key_event_value_transformation.cpp",
    "${mmi_service_path}/event_handler/src/key_map_manager.cpp",
    "${mmi_service_path}/libinput_adapter/src/libinput_adapter.cpp",
    "${mmi_service_path}/message_handle/src/server_msg_handler.cpp",
    "${mmi_service_path}/module_loader/src/mmi_service.cpp",
    "${mmi_service_path}/module_loader/src/uds_server.cpp",
    "${mmi_service_path}/permission_helper/src/permission_helper.cpp",
    "${mmi_service_path}/timer_manager/src/timer_manager.cpp",
    "${mmi_service_path}/window_manager/src/input_windows_manager.cpp",
  ]

  if (input_feature_input_cooperation) {
    sources += [
      "${mmi_service_path}/input_device_cooperate/src/cooperate_event_handler.cpp",
      "${mmi_service_path}/input_device_cooperate/src/cooperate_event_manager.cpp",
      "${mmi_service_path}/input_device_cooperate/src/device_cooperate_softbus_adapter.cpp",
      "${mmi_service_path}/input_device_cooperate/src/device_profile_adapter.cpp",
      "${mmi_service_path}/input_device_cooperate/src/distributed_input_adapter.cpp",
      "${mmi_service_path}/input_device_cooperate/src/i_input_device_cooperate_state.cpp",
      "${mmi_service_path}/input_device_cooperate/src/input_device_cooperate_sm.cpp",
      "${mmi_service_path}/input_device_cooperate/src/input_device_cooperate_state_free.cpp",
      "${mmi_service_path}/input_device_cooperate/src/input_device_cooperate_state_in.cpp",
      "${mmi_service_path}/input_device_cooperate/src/input_device_cooperate_state_out.cpp",
      "${mmi_service_path}/input_device_cooperate/src/input_device_cooperate_util.cpp",
    ]
  }

  if (input_feature_keyboard) {
    sources += [
      "${mmi_service_path}/key_event_normalize/src/key_event_normalize.cpp",
      "${mmi_service_path}/key_event_normalize/src/key_unicode_transformation.cpp",
      "${mmi_service_path}/subscriber/src/key_subscriber_handler.cpp",
    ]
    if (input_feature_combination_key) {
      sources += [ "${mmi_service_path}/key_command/src/key_command_handler.cpp" ]
    }
  }

  if (input_feature_mouse || input_feature_touchscreen) {
    sources += [ "${mmi_service_path}/touch_event_normalize/src/touch_event_normalize.cpp" ]
    if (input_feature_mouse) {
      sources += [
        "${mmi_service_path}/mouse_event_normalize/src/mouse_device_state.cpp",
        "${mmi_service_path}/mouse_event_normalize/src/mouse_event_normalize.cpp",
        "${mmi_service_path}/touch_event_normalize/src/gesture_transform_processor.cpp",
        "${mmi_service_path}/touch_event_normalize/src/touchpad_transform_processor.cpp",
      ]
      if (input_feature_pointer_drawing) {
        sources += [ "${mmi_service_path}/window_manager/src/pointer_drawing_manager.cpp" ]
      } else {
        sources += [ "${mmi_service_path}/window_manager/src/i_pointer_drawing_manager.cpp" ]
      }
    }
    if (input_feature_touchscreen) {
      sources += [
        "${mmi_service_path}/touch_event_normalize/src/tablet_tool_tranform_processor.cpp",
        "${mmi_service_path}/touch_event_normalize/src/touch_transform_processor.cpp",
      ]
    }
  }
  if (input_feature_monitor) {
    sources += [ "${mmi_service_path}/monitor/src/event_monitor_handler.cpp" ]
  }
  if (input_feature_interceptor) {
    sources += [ "${mmi_service_path}/interceptor/src/event_interceptor_handler.cpp" ]
  }

  configs = [ ":libmmi_server_config" ]

  cflags = [
    "-Wno-c++11-narrowing",
  ]

  libs = [
    "cjson",
    "input",
    "udev",
  ]

  deps = [
    #":drawing_pointer_image_Colorsucker",
    #":drawing_pointer_image_Copy",
    #":drawing_pointer_image_Cross",
    #":drawing_pointer_image_Default",
    #":drawing_pointer_image_East",
    #":drawing_pointer_image_Forbid",
    #":drawing_pointer_image_Hand_Grabbing",
    #":drawing_pointer_image_Hand_Open",
    #":drawing_pointer_image_Hand_Pointing",
    #":drawing_pointer_image_Help",
    #":drawing_pointer_image_MID_Btn_East",
    #":drawing_pointer_image_MID_Btn_North",
    #":drawing_pointer_image_MID_Btn_North_East",
    #":drawing_pointer_image_MID_Btn_North_South",
    #":drawing_pointer_image_MID_Btn_North_South_West_East",
    #":drawing_pointer_image_MID_Btn_North_West",
    #":drawing_pointer_image_MID_Btn_South",
    #":drawing_pointer_image_MID_Btn_South_East",
    #":drawing_pointer_image_MID_Btn_South_West",
    #":drawing_pointer_image_MID_Btn_West",
    #":drawing_pointer_image_Move",
    #":drawing_pointer_image_North",
    #":drawing_pointer_image_North_East",
    #":drawing_pointer_image_North_East_South_West",
    #":drawing_pointer_image_North_South",
    #":drawing_pointer_image_North_West",
    #":drawing_pointer_image_North_West_South_East",
    #":drawing_pointer_image_Resize_Left_Right",
    #":drawing_pointer_image_Resize_Up_Down",
    #":drawing_pointer_image_Screenshot_Cross",
    #":drawing_pointer_image_Screenshot_Cursor",
    #":drawing_pointer_image_South",
    #":drawing_pointer_image_South_East",
    #":drawing_pointer_image_South_West",
    #":drawing_pointer_image_Text_Cursor",
    #":drawing_pointer_image_West",
    #":drawing_pointer_image_West_East",
    #":drawing_pointer_image_Zoom_In",
    #":drawing_pointer_image_Zoom_Out",
    #":mmi_device_config.ini",
    #":multimodalinput.para.dac",
    #":multimodalinput_config_ability.json",
    #"//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
    #"//base/hiviewdfx/hitrace/interfaces/native/innerkits:hitrace_meter",
    #"//base/notification/eventhandler/frameworks/eventhandler:libeventhandler",
    #"//commonlibrary/c_utils/base:utils",
    #"//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",

    #"//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    #"//foundation/multimedia/image_framework/interfaces/innerkits:image_native",
    "//input/frameworks/proxy/ft_build:libmmi-common",
    "//input/service/connect_manager/ft_build:mmi_connect_manager_service",
    "//input/service/filter/ft_build:mmi_event_filter_proxy",
    "//input/util/ft_build:libmmi-util",
    #"//foundation/systemabilitymgr/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    #"//foundation/systemabilitymgr/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
  ]

  public_configs = [
    "//build/gn/configs/system_libs:c_utils_config",
    "//build/gn/configs/system_libs:ipc_core_config",
    "//build/gn/configs/system_libs:hilog_config",
    "//build/gn/configs/system_libs:hitrace_meter_config",
    "//build/gn/configs/system_libs:eventhandler_config",
    "//build/gn/configs/system_libs:safwk_config",
  ]
}
